
import sys
from random import randint
import random
import numpy

def value_func(move):
    pos_coord_to_simulate,pos_mult_to_add = data_for_value_func(move)

    # lists with data that will be use depending the movement to simulate
    limit=[29,19] # down and right limits of the map
    mult=[-1,1]

    #starting value
    value = 0        

    # tuple (x,y) with the coordinates to compare
    tuple_to_compare = []
    tuple_to_compare.append(current['x'])
    tuple_to_compare.append(current['y'])
        
    # simulate the next 5 movements. If it doesnt detect collision, value is 1.
    pass_flag = False
    for j in range(1,6):
            
        #simulates a pixel movement in the tuple to compare
        tuple_to_compare[pos_coord_to_simulate] += mult[pos_mult_to_add]
            
        # if the tuple to compare check colission with me or the enemy, it activates
        #the pass flag
        if (tuple_to_compare in enemy_pass
            or tuple_to_compare in me_pass):
                pass_flag = True
            
        # if the not condition satisfies, a safety point is added to the heuristical value
        if not(tuple_to_compare[pos_coord_to_simulate] <= 0  
        or tuple_to_compare[pos_coord_to_simulate] >= limit[pos_coord_to_simulate]
        or pass_flag):
            value += 1

    return value/5

def data_for_value_func(move):

    pos_coord_to_simulate = 0
    pos_mult_to_add = 0

    if move in ['UP','DOWN']:
       pos_coord_to_simulate = 1

    if move in   ['RIGHT','DOWN']:
        pos_mult_to_add = 1

    return pos_coord_to_simulate,pos_mult_to_add

def random_neigbor_func():
    movements = ['LEFT','UP','RIGHT','DOWN']
    # get the inverse of the current state and
    # delete it and its information from the array
    index = (movements.index(move)+2) % 4
    movements.pop(index)

    return movements[randint(0,2)]

def get_temp(time):
    return 1/(time)*15


# GAME LOOP
move = 'LEFT'
print(move)

# lists that save the positions where the enemy and me bodies are 
enemy_pass=[]
me_pass=[]
time = 0
while True:
    # n: total number of players (2 to 4).
    # p: your player number (0 to 3).
    n, p = [int(i) for i in input().split()]
    x1s = []
    y1s = []
    
    for i in range(n):
        # x0: starting X coordinate of lightcycle (or -1)
        # y0: starting Y coordinate of lightcycle (or -1)
        # x1: starting X coordinate of lightcycle (can be the same as X0 if you play before this player)
        # y1: starting Y coordinate of lightcycle (can be the same as Y0 if you play before this player)
        x0, y0, x1, y1 = [int(j) for j in input().split()]
        x1s.append(x1)
        y1s.append(y1)
        print("P",i,": pos actual ",x1,y1, file=sys.stderr, flush=True)

    #current state of our player and the enemy
    current = {'x':x1s[0],'y':y1s[0],'move':move}
    enemy = {'x':x1s[1],'y':y1s[1]}

    #save the current position of the player and the enemy
    me_pass.append([x1s[0],y1s[0]])
    enemy_pass.append([x1s[1],y1s[1]])
    
    time +=1
    temp = get_temp(time)

    neighbor = random_neigbor_func()

    delta = value_func(neighbor) - value_func(move)
    prob = numpy.e**(delta / temp)

    
    print('time',time, file=sys.stderr, flush=True)
    print('temp',temp, file=sys.stderr, flush=True)
    print('neighbor',neighbor, file=sys.stderr, flush=True)
    print("delta: ",delta, file=sys.stderr, flush=True)
    print("prob: ",prob, file=sys.stderr, flush=True)


    if(delta > 0 or random.random() < numpy.e**(delta / temp)):
        move = neighbor

    print(move)


        